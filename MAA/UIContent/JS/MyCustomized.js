/**
 * js References
 * multiselect.js,
 * css References
 * style.css,bootstrap-multiselect.css,
 */
//-----------------------------------------------------
/**
 * Lock Unlock Functions
 *
 */
function UnLockRow(tblRow) {
    var myCtrl = tblRow;
    myCtrl.find('.rowlock').each(function () {
        var that = $(this);
        that.removeAttr('disabled').removeClass('nodrop');
    });
    myCtrl.find('.btn-default').each(function () {
        $(this).removeClass('nodrop disabled bg-blue');
    });
    myCtrl.find('.addBtn').each(function () {
        var x = myCtrl.find('.is-invalid').length;
        var that = $(this);
        if (x == 0) { that.removeAttr('disabled').removeClass('nodrop'); }
        else { that.attr('disabled', 'disabled'); that.addClass('nodrop'); }
    });
    myCtrl.removeClass('nodrop sectionB');
};
/**
 * Table Cloaning
 * 
 */
function CloneRow(sourceTBody, destinationTBody, rowid, IsRemoveBtn, IsAddBtn, IsAddBtnEnable) {
    //New - 1. Checkbox Label for attribute functionality autogenerated 2. InvisibleTag introduced
    // Source table Body must have a row having (id="0" class="add-row")
    //The controlls should have a class named "alterID";
    // buttons should have class "cloneBtn" - For tooltip functionalities
    //"addBtn" and removeBtn are also used for corrosponding buttons of a row    
    //If multiselects are in a row then use the class "clonemultiselect" and remove multiple attribute and the classes which are responsible for multiselect creations.
    //Use "htmlVal" class for a controll if the value will be picked from innerhtml.
    //There should be "th" tag which may exclusively used for Serial Number Purpose.
    // "inVisibleTag" & "inValidTag" use this class to make a controll invalid or invisible when cloaning.
    //alert('CloneRow');
    var maxrows = 0, r = 0;
    var sourcebody = $('#' + sourceTBody);
    var destinationbody = $('#' + destinationTBody);
    $('#' + destinationTBody + ' tr').each(function () {
        var maxr = $(this).attr('id') * 1;
        if (maxr > maxrows) { maxrows = maxr; }
    });
    if (maxrows >= 1) { r = maxrows + 1; } else { r = 1; }//Geting maximum row
    var cloneready = sourcebody.find('tr').clone();
    cloneready.attr("id", r);
    cloneready.find('.alterID').each(function () {
        that = $(this);
        var mID = that.attr('id').split('_');
        var newID = mID[0] + '_' + r;
        that.attr('id', newID);
    });
    cloneready.find('.form-check-label').each(function () {
        that = $(this);
        var mID = that.attr('id');
        that.attr('for', 'opt' + mID)
    });
    cloneready.find('.inValidTag').each(function () {
        that = $(this);
        that.val('');
        that.isInvalid();
    });    
    cloneready.find('.inVisibleTag').each(function () {
        that = $(this);
        that.addClass('inVisible').removeClass('is-invalid');
    });
    cloneready.find('.btn-group').remove();
    cloneready.find('.ApplyMultiSelectWithSelectAll').each(function () {
        that = $(this);
        that.prop('multiple', 'multiple');
        that.multiselect({
            templates: {
                button: '<button type="button" class="multiselect dropdown-toggle btn btn-primary w-100 selectBox" data-bs-toggle="dropdown" aria-expanded="false"><span class="multiselect-selected-text"></span></button>',
            },
            includeSelectAllOption: true,
            selectAllName: 'select-all-name'
        });
        that.multiselect('clearSelection');
        that.multiselect('refresh');
    });
    cloneready.find('.ApplyMultiSelect').each(function () {
        that = $(this);
        that.prop('multiple', 'multiple');
        that.multiselect({
            templates: {
                button: '<button type="button" class="multiselect dropdown-toggle btn btn-primary w-100 selectBox" data-bs-toggle="dropdown" aria-expanded="false"><span class="multiselect-selected-text"></span></button>',
            },
        });
        that.multiselect('clearSelection');
        that.multiselect('refresh');
    });
    cloneready.find('input[type="date"]').each(function () {
        $(this).on("change", function () {
            $(this).ApplyCustomDateFormat();
        });
        $(this).ApplyCustomDateFormat();
    });
    cloneready.find('.ApplyCustomTimeFormat').each(function () {
        var firstOpen = true;
        var time;
        $(this).datetimepicker({
            useCurrent: false,
            format: "hh:mm A"
        }).on('dp.show', function () {
            if (firstOpen) {
                time = moment().startOf('day');
                firstOpen = false;
            }
            else {
                time = "01:00 PM"
            }

            $(this).data('DateTimePicker').date(time);
        });
    });    
    cloneready.find('.cloneBtn').each(function () {
        that = $(this);
        that.on('mouseenter', function () {
            $(this).tooltip('show');
        });
        that.on('click mouseleave', function () {
            $(this).tooltip('hide');
        });
    });
    cloneready.find('.datelabel').each(function () {
        $(this).html('Select A Date');
    });
    cloneready.find('.htmlVal').each(function () {
        $(this).html('');
    });
    cloneready.find('.addBtn').each(function () {
        var that = $(this);
        if (IsAddBtn) {
            that.removeClass('inVisible');
            if (IsAddBtnEnable) { that.removeAttr('disabled'); } else { that.attr('disabled', 'disabled'); }
        } else {
            that.addClass('inVisible');
        }
    });
    cloneready.find('.removeBtn').each(function () {
        var that = $(this);
        if (IsRemoveBtn) {
            that.removeClass('inVisible');
        } else { that.addClass('inVisible'); }
    });
    sourcebody.find('.cloneBtn').each(function () {
        that = $(this);
        that.on('mouseenter', function () {
            $(this).tooltip('show');
        });
        that.on('mouseleave click', function () {
            $(this).tooltip('hide');
        });
    });
    cloneready.find('.form-control').each(function () {
        $(this).focus(function () {
            $(this).tooltip('show');
        });
    });    
    cloneready.find('.btn-default').each(function () {
        $(this).removeClass('nodrop disabled');
    });
    if (rowid == 0) {
        if (maxrows == 0) {
            destinationbody.append(cloneready);
        } else {
            $(cloneready).insertBefore('#' + destinationTBody + ' tr:first');
        }
    }
    else {
        $(cloneready).insertAfter('#' + rowid);
    }
    var sl = 2;
    $('#' + destinationTBody + ' th').each(function () {
        $(this).html(sl);
        sl += 1;
    });
    return r;
};
function RowSpanRemoveBtnClicked() {
    var $row = $(RowSpanRemoveBtnClicked.caller.arguments[0].target.closest('.add-row'));
    var nextrow = $row.next();
    var ind = 0;
    $row.find('td').each(function (index, element) {
        var $cell = $(element);
        var rowspan = $cell.attr('rowspan');
        if (rowspan > 1) {
            $cell.attr('rowspan', rowspan - 1);
            var $secondCell = nextrow.find('td:eq(' + ind + ')');
            $secondCell.before($cell);
            ind += 1;
            $row.remove();
        } else {
            $cell.remove();
        }
    });
};
function RemoveTblRow(tblrow, DestinationTBody) {
    if (tblrow.attr("id") == 0) { } else { tblrow.remove(); }
    var sl = 2;
    $('#' + DestinationTBody + ' th').each(function () {
        $(this).html(sl);
        sl += 1;
    });
};
function RowRemoveBtnClicked(destinationTBody) {
    var r = $(RowRemoveBtnClicked.caller.arguments[0].target.closest('.add-row'));
    r.find('.btn').tooltip('hide');
    RemoveTblRow(r, destinationTBody);
};
function RowRemoveBtnClickedES(destinationTBody, SubmitBtnID, CtrlContainerID) {
    //RowRemoveBtnClickedES - Effecting submit button.
    var r = $(RowRemoveBtnClickedES.caller.arguments[0].target.closest('.add-row'));
    r.find('.btn').tooltip('hide');
    RemoveTblRow(r, destinationTBody);
    ChangeBtnStatus(SubmitBtnID, CtrlContainerID);
};
function RowRemoveBtnClickedEnablePreRow(destinationTBody, TableID) {
    var r = $(RowRemoveBtnClickedEnablePreRow.caller.arguments[0].target.closest('.add-row'));
    r.find('.cloneBtn').tooltip('hide');
    RemoveTblRow(r, destinationTBody);
    UnLockRow($('#' + TableID + ' tr:last'));
};
function RowRemoveBtnClickedEnablePreRowES(destinationTBody, SubmitBtnID, CtrlContainerID, TableID) {
    var r = $(RowRemoveBtnClickedEnablePreRowES.caller.arguments[0].target.closest('.add-row'));
    r.find('.cloneBtn').tooltip('hide');
    RemoveTblRow(r, destinationTBody);
    UnLockRow($('#' + TableID + ' tr:last'));
    ChangeBtnStatus(SubmitBtnID, CtrlContainerID);
};
function RowAddBtnClicked(sourceTBody, destinationTBody, IsRemoveBtn, IsAddBtn, IsAddBtnEnable) {
    var insrow = $(RowAddBtnClicked.caller.arguments[0].target.closest('.add-row'));
    var insrowid = insrow.attr('id');
    //var clonerowid = CloneRow(sourceTBody, destinationTBody, insrowid, IsRemoveBtn, IsAddBtn, IsAddBtnEnable);
    CloneRow(sourceTBody, destinationTBody, insrowid, IsRemoveBtn, IsAddBtn, IsAddBtnEnable);
};
function RowAddBtnWithEffectSubmitClicked(sourceTBody, destinationTBody, IsRemoveBtn, IsAddBtn, IsAddBtnEnable, SubmitBtnID, CtrlContainerID) {
    var insrowid = $(RowAddBtnWithEffectSubmitClicked.caller.arguments[0].target.closest('.add-row')).attr('id');
    var r = CloneRow(sourceTBody, destinationTBody, insrowid, IsRemoveBtn, IsAddBtn, IsAddBtnEnable);
    if (r > 0) { ChangeBtnStatus(SubmitBtnID, CtrlContainerID); }
};

/**
 * Common Button Functionality
 *
 */
function DeleteBtnClicked(message, ajaxurl,bodyParamJson, redirecturl) {
    MyConfirmationAlertWithCallBacks(message,function () {
        PostDataInAjaxWithResponseHandleing(ajaxurl, bodyParamJson, true, redirecturl, false, '');
    },'');
};
function DeleteBtnClickedWithCallBack(message, ajaxurl, bodyParamJson, callbackFunction) {
    MyConfirmationAlertWithCallBacks(message, function () {
        PostDataInAjaxWithResponseHandleing(ajaxurl, bodyParamJson, false, '', true, callbackFunction);
    }, '');
};
function ClearBtnClickedWithConfirmation(pageurl) {
    //IsBackDenied hidden field should be there in the page.
    if ($('#IsBackDenied').val() == 1) {
        MyAlertWithRedirection(5, 'All Recently Unsaved Data Will Be Lost.', pageurl);
    }
    else {
        window.location.href = pageurl;
    }
};
function ClearBtnClicked(pageurl) {    
        window.location.href = pageurl;
};
function BackBtnClicked(url) {
    //Cookie handle functions must be there in the project
    $.ajax({
        url: url,
        success: function (result) { window.location.href = result; }
    });
};
function BackBtnClickedWithConfirmation(url) {
    if ($('#IsBackDenied').val() == 1) {
        MyConfirmationAlertWithCallBacks('Are You Sure Want to Go Back?', function () {
            $.ajax({
                url: url,
                success: function (result) { window.location.href = result; }
            });
        }, '');
    }
    else {
        window.location.href = pageurl;
    }
};
function SimpleBackBtnClicked(redirecturl) {
    window.location.href = redirecturl;
};
function SimpleBackBtnClickedWithConfirmation(redirecturl) {
    if ($('#IsBackDenied').val() == 1) {
        MyConfirmationAlertWithRedirections('Are You Sure Want To Go Back?', redirecturl, '');
    }
    else {
        window.location.href = redirecturl;
    }    
};
function ChangeBtnStatus(BtnID, DivID) {
    var Btn = $('#' + BtnID);
    var x = DivInvalidCount(DivID);
    if (x == 0) { Btn.makeEnable(); } else { Btn.makeDisable() }
    $('#IsBackDenied').val(1);
};
/**
 * Ajax Functions
 *
 */
function GetDataFromAjax(url) {
    //alert(url);
    return $.ajax({
        url: url,
        method: "GET",
        dataType: "json"
    });
};
function PostDataInAjax(url, BodyParamInJson) {
    return $.ajax({
        method: 'POST',
        url: url,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: BodyParamInJson
    });
};
function PostDataInAjaxWithResponseHandleing(url, BodyParamInJson,IsRedirect,RedirectUrl,IsCallback,CallBackFunction) {
    //REsponse should come in "MyAjaxResponse" object.
    $.ajax({
        method: 'POST',
        url: url,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: BodyParamInJson,
        success: function (data) {
            if (data.bResponseBool) {
                if (IsRedirect) {
                    MyAlertWithRedirection(1, data.sResponseString, RedirectUrl);
                }
                else if (IsCallback) {
                    MyAlertWithCallBack(1, data.sResponseString, CallBackFunction);
                }
                else {
                    MyAlert(1, data.sResponseString);
                }
            }
            else {
                MyAlert(3, data.sResponseString);
            }
            
        },
        error: function (xhr, status, error) {
            // Handle error
            MyAlert(3, 'Error Status: '+status + ' Description: '+error);
        }
    });
};
function PostDataInAjaxWithResponseHandleingNoMsg(url, BodyParamInJson, IsRedirect, RedirectUrl) {
    //REsponse should come in "MyAjaxResponse" object.
    $.ajax({
        method: 'POST',
        url: url,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: BodyParamInJson,
        success: function (data) {
            if (data.bResponseBool) {
                if (IsRedirect) {
                    window.location.href = RedirectUrl;
                }                
                else {
                    MyAlert(1, data.sResponseString);
                }
            }
            else {
                MyAlert(3, data.sResponseString);
            }

        },
        error: function (xhr, status, error) {
            // Handle error
            MyAlert(3, 'Error Status: ' + status + ' Description: ' + error);
        }
    });
};
function HandleResponseOfPostRequest(data, SuccessMessageText, IsRedirect, RedirectUrl, IsCallback, CallBackFunction) {
    //REsponse should come in "MyAjaxResponse" object.
    //public class MyAjaxResponse {
    //    public DateTime dResponseDate { get; set; }
    //    public int iResponseInteger { get; set; }
    //    public bool bResponseBool { get; set; }
    //    public string sResponseString { get; set; }
    //    public string sResponseString2 { get; set; }
    //}
    $(data).each(function (index, item) {
        if (item.bResponseBool == true) {
            if (IsRedirect) {
                MyAlertWithRedirection(1, SuccessMessageText, RedirectUrl);
            }
            else if (IsCallback) {
                MyAlertWithCallBack(1, SuccessMessageText, CallBackFunction);
            }
            else {
                MyAlert(1, SuccessMessageText);
            }
        }
        else {
            MyAlert(3, item.sResponseString);
        }
    });
};
function GetDataFromTable(tableID) {
    //The fields should have an attribute "data-name", Which is the property name of the MVC object
    // "data-name-text" attribute can be used for dropdown or multiselect to get the selected text.
    var schrecords = '';
    var dataname;
    var datavalue;
    var mrecord = '';
    $('#' + tableID + ' tbody tr').each(function () {
        mRow = $(this);
        mRow.find('[data-name]').each(function () {
            that = $(this);
            dataname = that.attr('data-name');
            if (that.hasClass('htmlVal')) {
                datavalue = that.html();
            }
            else if (that.hasClass('CheckVal')) {
                if (that.prop("checked")) { datavalue = "true" } else { datavalue = "false" }
            }
            else { datavalue = that.val(); }
            mrecord = mrecord + '"' + dataname + '":"' + datavalue + '",';
        });
        mRow.find('[data-name-text]').each(function () {
            that = $(this);
            dataname = that.attr('data-name-text');
            thatid = that.attr('id');
            datavalue = $('#' + thatid + ' option:selected').toArray().map(item => item.text).join();
            mrecord = mrecord + '"' + dataname + '":"' + datavalue + '",';
        });
        mrecord = mrecord.replace(/,\s*$/, "");
        schrecords = schrecords + '{' + mrecord + '},';
        mrecord = '';
    });
    schrecords = schrecords.replace(/,\s*$/, "");
    schrecords = '[' + schrecords + ']';
    //alert(schrecords);
    return schrecords;
};
function GetDataFromDivHavingNoTables(divID) {
    //The fields should have an attribute "data-name", Which is the property name of the MVC object
    // "data-name-text" attribute can be used for dropdown or multiselect to get the selected text.
    var schrecords = '';
    var dataname;
    var datavalue;
    var mrecord = '';
    var myDiv = $('#' + divID);
    myDiv.find('[data-name]').each(function () {
        that = $(this);
        dataname = that.attr('data-name');
        if (that.hasClass('htmlVal')) {
            datavalue = that.html();
        }
        else if (that.hasClass('CheckVal')) {
            if (that.prop("checked")) { datavalue = "true" } else { datavalue="false"}
        }
        else { datavalue = that.val(); }
        mrecord = mrecord + '"' + dataname + '":"' + datavalue + '",';
    });
    myDiv.find('[data-name-text]').each(function () {
        that = $(this);
        dataname = that.attr('data-name-text');
        thatid = that.attr('id');
        datavalue = $('#' + thatid + ' option:selected').toArray().map(item => item.text).join();
        mrecord = mrecord + '"' + dataname + '":"' + datavalue + '",';
    });
    mrecord = mrecord.replace(/,\s*$/, "");
    schrecords = schrecords + '{' + mrecord + '}';    
    //alert(schrecords);
    return schrecords;
};
/**
 * Functions related to Input Controlls
 *
 */
function DropdownRefresh(data, myCtrlID, IsIDString, DefaultText) {
// Data must be an object of CustomSelectCtrlOptions class
//    public class CustomSelectCtrlOptions {
//        public int ID { get; set; }
//        public string IDStr { get; set; }
//        public string DisplayText { get; set; }
//        public bool IsSelected { get; set; }
//}
    var myCtrl = $("#" + myCtrlID);
    myCtrl.empty(); // Clear existing options
    myCtrl.append($('<option/>', { value: "", text: DefaultText })); // Adding Default Text
    $.each(data, function (index, item) {
        if (IsIDString) {
            myCtrl.append($('<option/>', { value: item.IDStr, text: item.DisplayText }));
        } else {
            myCtrl.append($('<option/>', { value: item.ID, text: item.DisplayText }));
        }
    });
    myCtrl.isInvalid();
}
function DropdownRefreshWithSelectedValue(data, myCtrlID, IsIDString, DefaultText,SelectedValue) {
    // Data must be an object of CustomSelectCtrlOptions class
    //    public class CustomSelectCtrlOptions {
    //        public int ID { get; set; }
    //        public string IDStr { get; set; }
    //        public string DisplayText { get; set; }
    //        public bool IsSelected { get; set; }
    //}
    var myCtrl = $("#" + myCtrlID);
    myCtrl.empty(); // Clear existing options
    myCtrl.append($('<option/>', { value: "", text: DefaultText })); // Adding Default Text
    $.each(data, function (index, item) {
        if (IsIDString) {
            myCtrl.append($('<option/>', { value: item.IDStr, text: item.DisplayText }));
        } else {
            myCtrl.append($('<option/>', { value: item.ID, text: item.DisplayText }));
        }
    });
    myCtrl.val(SelectedValue);
    myCtrl.isValid();
}
function MultiselectRefresh(data, myCtrlID, IsIDString) {
    var myCtrl = $("#" + myCtrlID);
    myCtrl.empty();
    myCtrl.multiselect('destroy');
    //myCtrl.append($('<option/>', { value: "", text: DefaultText })); // Adding Default Text
    $.each(data, function (index, item) {
        if (IsIDString) {
            myCtrl.append($('<option/>', { value: item.IDStr, text: item.DisplayText }));
        }
        else { myCtrl.append($('<option/>', { value: item.ID, text: item.DisplayText })); }
    });
    myCtrl.attr('multiple', 'multiple');
    myCtrl.multiselect({
        templates: {
            button: '<button id="B0" type="button" class="multiselect dropdown-toggle btn btn-primary w-100 selectBox" data-bs-toggle="dropdown" aria-expanded="false"><span class="multiselect-selected-text"></span></button>',
        },
    });
    myCtrl.multiselect('clearSelection');
    myCtrl.multiselect('refresh');
    myCtrl.isInvalid();
}
function MultiselectRefreshWithSelectedValues(data, myCtrlID, IsIDString,SelectedValue) {
    var myCtrl = $("#" + myCtrlID);
    myCtrl.empty();
    myCtrl.multiselect('destroy');
    //myCtrl.append($('<option/>', { value: "", text: DefaultText })); // Adding Default Text
    $.each(data, function (index, item) {
        if (IsIDString) {
            myCtrl.append($('<option/>', { value: item.IDStr, text: item.DisplayText }));
        }
        else { myCtrl.append($('<option/>', { value: item.ID, text: item.DisplayText })); }
    });
    myCtrl.attr('multiple', 'multiple');
    myCtrl.multiselect({
        templates: {
            button: '<button id="B0" type="button" class="multiselect dropdown-toggle btn btn-primary w-100 selectBox" data-bs-toggle="dropdown" aria-expanded="false"><span class="multiselect-selected-text"></span></button>',
        },
    });
    myCtrl.multiselect('clearSelection');
    myCtrl.multiselect('refresh');
 // Assigning Values
    if (SelectedValue != '') {
        var i = SelectedValue.indexOf(',');
        if (i >= 0) {
            myCtrl.val(SelectedValue.split(','));
        } else {
            myCtrl.val(SelectedValue);
        }
        myCtrl.multiselect('refresh');
        myCtrl.isValid();
    } else { myCtrl.isInvalid();}    
}
function FillCashCadingDropDown(CachCadeChildID, url, IsIDString, DefaultText) {
    GetDataFromAjax(url).done(function (data) {
        DropdownRefresh(data, CachCadeChildID, IsIDString, DefaultText);        
    });
};
function FillCashCadingDropDownWithSelectedValue(CachCadeChildID, url, IsIDString, DefaultText, SelectedValue) {
    GetDataFromAjax(url).done(function (data) {
        DropdownRefreshWithSelectedValue(data, CachCadeChildID, IsIDString, DefaultText, SelectedValue);
    });
};
function FillCashCadingMultiSelect(CachCadeChildID, url, IsIDString) {
    GetDataFromAjax(url).done(function (data) {
        MultiselectRefresh(data, CachCadeChildID, IsIDString);
    });
};
function FillCashCadingMultiSelectWithSelectedValue(CachCadeChildID, url, IsIDString, SelectedValue) {
    GetDataFromAjax(url).done(function (data) {
        MultiselectRefreshWithSelectedValues(data, CachCadeChildID, IsIDString, SelectedValue);
    });
};
/**
 * Some Useful functions
 *
 */
function DivInvalidCount(mdivID) {
    var x = 0;
    var mDiv = $('#' + mdivID);
    x = mDiv.find('.is-invalid').length;
    return x;
};
function WordCount(value) {
    return $.trim(value).split(" ").length;
};
function GetCommonValues(CommaSeparatedString1, CommaSeparatedString2) {
    var commonElements = [];
    var a1 = []; var a2 = [];
    if (CommaSeparatedString1.indexOf(',') >= 0) {
        a1 = CommaSeparatedString1.split(',');
    } else { a1.push(CommaSeparatedString1); }
    if (CommaSeparatedString2.indexOf(',') >= 0) {
        a2 = CommaSeparatedString2.split(',');
    } else { a2.push(CommaSeparatedString2); }
    $.each(a1, function (index, value) {
        if ($.inArray(value, a2) !== -1) {
            commonElements.push(value);
        }
    });
    return commonElements;
};
function GetCommonValuesFromArray(CommaSeparatedString1, CommaSeparatedString2) {
    var commonElements = [];
    $.each(CommaSeparatedString1, function (index, value) {
        if ($.inArray(value, CommaSeparatedString2) !== -1) {
            commonElements.push(value);
        }
    });
    return commonElements;
};
/**
 * Some Function Chaining
 *
 */
$.fn.isInvalid = function () {
    var that = this;
    that.addClass('is-invalid valid').removeClass('is-valid');
};
$.fn.isValid = function () {
    var that = this;
    that.addClass('is-valid valid').removeClass('is-invalid');
};
$.fn.removeValidation = function () {
    var that = this;
    that.removeClass('is-valid is-invalid');
};
$.fn.makeEnable = function () {
    var that = this;
    that.removeAttr('disabled');
    that.removeClass('nodrop');
};
$.fn.makeDisable = function () {
    var that = this;
    that.attr('disabled', 'disabled');
    that.addClass('nodrop');
};
$.fn.makeVisible = function () {
    var that = this;
    that.removeClass('inVisible');
};
$.fn.makeInvisible = function () {
    var that = this;
    that.AddClass('inVisible');
};
$.fn.isRed = function () {
    var that = this;
    that.addClass('border-red').removeClass('border-green');
};
$.fn.isGreen = function () {
    var that = this;
    that.addClass('border-green').removeClass('border-red');
};
/**
 * Validations
 *
 */
function isOnlyDigits(value) {
    var regex = /^[0-9]+$/;
    return regex.test(value);
};
function isDecimalNumber(value) {
    var regex = /^\d+(\.\d+)?$/;
    return regex.test(value);
}
function isOnlyAlphabates(value) {
    var regex = /^[a-zA-Z]+$/;
    return regex.test(value);
}
function isOnlyAlphabatesWithSpace(value) {
    var regex = /^[a-zA-Z\s]+$/;
    return regex.test(value);
}
function isAlphaNumeric(value) {
    var regex = /^[a-zA-Z0-9]+$/;
    return regex.test(value);
}
function isAlphaNumericWithSpace(value) {
    var regex = /^[a-zA-Z0-9\s]+$/;
    return regex.test(value);
}
function isValidEmailID(value) {
    var regex = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/;
    return regex.test(value);
}
function isValidContactNumber(value) {
    var regex = /^\d{10}$/;
    return regex.test(value);
}
function isAlphabateWithMaxLimit(value, maxLimitInteger) {
    if (value.length > maxLimitInteger) { return false; }
    else {
        return value.match(/^[a-zA-Z]+$/);
    }
};
function isAlphaNumericWithMaxLimit(value, maxLimitInteger) {
    if (value.length > maxLimitInteger) { return false; }
    else {
        return value.match(/^[a-zA-Z0-9]+$/);
    }
};
function isSpaceAlphabateWithMaxLimit(value, maxLimitInteger) {
    if (value.length > maxLimitInteger) { return false; }
    else {
        return value.match(/^[a-zA-Z\s]+$/);
    }
};
function isSpaceAlphaNumericWithMaxLimit(value, maxLimitInteger) {
    if (value.length > maxLimitInteger) { return false; }
    else {
        return value.match(/^[a-zA-Z0-9\s]+$/);
    }
};
function validatePassword(value) {
    //(?=.* [a - z]) Contains at least one lowercase letter
    //(?=.* [A - Z]) Contains at least one uppercase letter
    //(?=.*\d) Contains at least one digit
    //(?=.* [@$!%*?&]) Contains at least one special character
    //[A - Za - z\d@$!%*?&]{ 6,} Contains at least 6 characters and only includes uppercase

    var regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&#])[A-Za-z\d@$!%*?&#]{6,}$/;
    return regex.test(value);
}
function isValidMaxWordCount(value, MaxNoOfWordsRequired) {
    var wordcount = $.trim(value).split(" ").length;
    if (wordcount <= MaxNoOfWordsRequired) { return true; } else { return false; }
}
function CompareStringArrayForCommonValue(CommaSeparatedString1, CommaSeparatedString2) {
    var commonElements = [];
    $.each(CommaSeparatedString1, function (index, value) {
        if ($.inArray(value, CommaSeparatedString2) !== -1) {
            commonElements.push(value);
        }
    });
    if (commonElements.length > 0) {
        return true;
    } else { return false; }
};
function CompareStringForCommonValue(CommaSeparatedString1, CommaSeparatedString2) {
    var commonElements = [];
    var a1 = []; var a2 = [];
    if (CommaSeparatedString1.indexOf(',') >= 0) {
        a1 = CommaSeparatedString1.split(',');
    } else { a1.push(CommaSeparatedString1); }
    if (CommaSeparatedString2.indexOf(',') >= 0) {
        a2 = CommaSeparatedString2.split(',');
    } else { a2.push(CommaSeparatedString2); }
    $.each(a1, function (index, value) {
        if ($.inArray(value, a2) !== -1) {
            commonElements.push(value);
        }
    });
    if (commonElements.length > 0) {
        return true;
    } else { return false; }
};
/**
 * Date Time
 *
 */
$.fn.ApplyCustomDateFormat = function () {
    var that = this;
    var parentid = that.attr('id');
    var lblid = 'lbl' + parentid;
    var dt = this.val();
    var e = dt;
    if (dt.indexOf('/') != -1) {
        var e = dt.split('/').reverse().join('/');
    }
    else {
        var e = dt.split('-').reverse().join('/');
    }
    if (dt != '') { $('#' + lblid).html(e); } else { $('#' + lblid).html('Select A Date'); }
};
function IsValidTimeSelected(InputDate, InputTime) {
    //InputDate='2023-05-22' InputTime='20:22'
    var targetDateTime = new Date(InputDate + ' ' + InputTime);
    var currentDateTime = new Date().getTime() - 59000;
    //alert('Target : ' + targetDateTime.getTime() + ' Current: ' + currentDateTime );
    if (targetDateTime.getTime() >= currentDateTime) {
        return true;
    } else {
        return false;
    }
};
function GetCurrentTimeWithAMPM() {
    const date = new Date();
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var ampm = hours >= 12 ? 'pm' : 'am';
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0' + minutes : minutes;
    var strTime = hours + ':' + minutes + ' ' + ampm;
    return strTime;
}
/**
 * Sweet Alerts
 *
 */
function MyAlert(MessageType, MessageText,AllowOutsideClick) {
    //MessageType 0-Information Alert, 1-Success Alert,2-Confirmation Alert,
    //MessageType  3- Eror Alert. 4- Validation Failed Alert,5-Warning Alert,

    switch (MessageType) {
        case 1:
            MySuccessAlert(MessageText, '', AllowOutsideClick);
            break;
        case 3:
            MyErrorAlert(MessageText, '', AllowOutsideClick);
            break;
        case 4:
            MyValidationFailedAlert(MessageText, '', AllowOutsideClick);
            break;
        case 5:
            MyWarningAlert(MessageText, '', AllowOutsideClick);
            break;        
        default:
            MyInformationAlert(MessageText, '', AllowOutsideClick);
            break;
    }
};
function MyAlertWithCallBack(MessageType, MessageText, callBackFunction, AllowOutsideClick) {
    //MessageType 0-Information Alert, 1-Success Alert,2-Confirmation Alert,
    //MessageType  3- Eror Alert. 4- Validation Failed Alert,5-Warning Alert,
    //debugger;
    switch (MessageType) {
        case 1:
            MySuccessAlert(MessageText, callBackFunction, AllowOutsideClick);
            break;
        case 2:
            MyConfirmationAlert(MessageText, callBackFunction, AllowOutsideClick);
            break;
        case 3:
            MyErrorAlert(MessageText, callBackFunction, AllowOutsideClick);
            break;
        case 4:
            MyValidationFailedAlert(MessageText, callBackFunction, AllowOutsideClick);
            break;
        case 5:
            MyWarningAlert(MessageText, callBackFunction, AllowOutsideClick);
            break;
        case 6:
            MyConfirmationAlertV2(MessageText, callBackFunction, AllowOutsideClick);
            break;
        case 7:
            MyConfirmationCancelAlert(MessageText, callBackFunction, AllowOutsideClick);
            break;
        default:
            MyInformationAlert(MessageText, callBackFunction, AllowOutsideClick);
            break;
    }
};
function MyAlertWithRedirection(MessageType, MessageText, RedirectUrl, AllowOutsideClick) {
    //MessageType 0-Information Alert, 1-Success Alert,2-Confirmation Alert,
    //MessageType  3- Eror Alert. 4- Validation Failed Alert,5-Warning Alert,
    switch (MessageType) {
        case 1:
            MySuccessAlertWithRedirection(MessageText, RedirectUrl, AllowOutsideClick);
            break;
        case 2:
            MyConfirmationAlertWithRedirection(MessageText, RedirectUrl, AllowOutsideClick);
            break;
        case 3:
            MyErrorAlertWithRedirection(MessageText, RedirectUrl, AllowOutsideClick);
            break;
        case 4:
            MyValidationFailedAlertWithRedirection(MessageText, RedirectUrl, AllowOutsideClick);
            break;
        case 5:
            MyWarningAlertWithRedirection(MessageText, RedirectUrl, AllowOutsideClick);
            break;
        case 7:
            MyConfirmationAlertWithRedirectionOnCancel(MessageText, RedirectUrl, AllowOutsideClick);
            break;
        default:
            MyInformationAlertWithRedirection(MessageText, RedirectUrl, AllowOutsideClick);
            break;
    }
};
function MyConfirmationAlertWithCallBacks(MessageText, OkCallback, CancelCallback, AllowOutsideClick) {
    Swal.fire({
        title: 'Confirmation',
        text: MessageText,
        icon: 'question',
        customClass: 'swal-wide',
        confirmButtonText: "Yes",
        cancelButtonText: "No",
        cancelButtonClass: 'btn-cancel',
        confirmButtonColor: '#2527a2',
        showCancelButton: true,
        allowOutsideClick: AllowOutsideClick,
    }).then(function (result) {
        if (result.isConfirmed) {
            if (OkCallback != '' && OkCallback != 'NA' && typeof OkCallback === 'function') {
                OkCallback();
            }
        } else {
            if (CancelCallback != '' && CancelCallback != 'NA' && typeof CancelCallback === 'function') {
                CancelCallback();
            }
        }
    });
};
function MyConfirmationAlertWithRedirections(MessageText, OkRedirectUrl, CancelRedirectUrl, AllowOutsideClick) {
    Swal.fire({
        title: 'Confirmation',
        text: MessageText,
        icon: 'question',
        customClass: 'swal-wide',
        confirmButtonText: "Yes",
        cancelButtonText: "No",
        cancelButtonClass: 'btn-cancel',
        confirmButtonColor: '#2527a2',
        showCancelButton: true,
        allowOutsideClick: AllowOutsideClick,
    }).then(function (result) {
        if (result.isConfirmed) {
            window.location.href = OkRedirectUrl;
        }
        else {
            window.location.href = CancelRedirectUrl;
        }
    });
};
//Helping functions recomended not call directly from outside.
function MySuccessAlert(MessageText, callback, AllowOutsideClick) {
    Swal.fire({
        title: 'Success',
        text: MessageText,
        icon: 'success',
        customClass: 'swal-wide my-success',
        buttons: {
            confirm: 'Ok'
        },
        confirmButtonColor: '#2527a2',
        allowOutsideClick: AllowOutsideClick,
    }).then(function (result) {
        if (result.isConfirmed) {
            if (callback != '' && typeof callback === 'function') {
                callback();
            }
        }
    });
};
function MyInformationAlert(MessageText, callback, AllowOutsideClick) {
    Swal.fire({
        title: 'Information',
        text: MessageText,
        icon: 'info',
        customClass: 'swal-wide my-info',
        buttons: {
            confirm: 'Ok'
        },
        confirmButtonColor: '#2527a2',
        allowOutsideClick: AllowOutsideClick,
    }).then(function (result) {
        if (result.isConfirmed) {
            if (callback != '' && typeof callback === 'function') {
                callback();
            }
        }
    });
};
function MyValidationFailedAlert(MessageText, callback, AllowOutsideClick) {
    Swal.fire({
        title: 'Validation Failed',
        text: MessageText,
        icon: 'error',
        customClass: 'swal-wide my-error',
        buttons: {
            confirm: 'Ok'
        },
        confirmButtonColor: '#2527a2',
        allowOutsideClick: AllowOutsideClick,
    }).then(function (result) {
        if (result.isConfirmed) {
            if (callback != '' && typeof callback === 'function') {
                callback();
            }
        }
    });
};
function MyErrorAlert(MessageText, callback, AllowOutsideClick) {
    Swal.fire({
        title: 'Error Occurred',
        text: MessageText,
        icon: 'error',
        customClass: 'swal-wide my-error',
        buttons: {
            confirm: 'Ok'
        },
        confirmButtonColor: '#2527a2',
        allowOutsideClick: AllowOutsideClick,
    }).then(function (result) {
        if (result.isConfirmed) {
            if (callback != '' && typeof callback === 'function') {
                callback();
            }
        }
    });
};
function MyConfirmationAlert(MessageText, callback, AllowOutsideClick) {
    Swal.fire({
        title: 'Confirmation',
        text: MessageText,
        icon: 'question',
        customClass: 'swal-wide',
        confirmButtonText: "Yes",
        cancelButtonText: "No",
        cancelButtonClass: 'btn-cancel',
        confirmButtonColor: '#2527a2',
        showCancelButton: true,
        allowOutsideClick: AllowOutsideClick,
    }).then(function (result) {
        if (result.isConfirmed) {
            if (callback != '' && callback != 'NA' && typeof callback === 'function') {
                callback();
            }
        }
    });
};
function MyConfirmationAlertV2(MessageText, callback, AllowOutsideClick) {
    Swal.fire({
        title: 'Confirmation',
        text: MessageText,
        icon: 'question',
        customClass: 'swal-wide',
        confirmButtonText: "Yes",
        cancelButtonText: "No",
        cancelButtonClass: 'btn-cancel',
        confirmButtonColor: '#2527a2',
        showCancelButton: false,
        allowOutsideClick: AllowOutsideClick,
    }).then(function (result) {
        if (result.isConfirmed) {
            if (callback != '' && typeof callback === 'function') {
                callback();
            }
        }
    });
};
function MyConfirmationCancelAlert(MessageText, callback, AllowOutsideClick) {
    Swal.fire({
        title: 'Confirmation',
        text: MessageText,
        icon: 'question',
        customClass: 'swal-wide',
        confirmButtonText: "Yes",
        cancelButtonText: "No",
        cancelButtonClass: 'btn-cancel',
        confirmButtonColor: '#2527a2',
        showCancelButton: false,
        allowOutsideClick: AllowOutsideClick,
    }).then(function (result) {
        if (!result.isConfirmed) {
            if (callback != '' && typeof callback === 'function') {
                callback();
            }
        }
    });
};
function MyWarningAlert(MessageText, callback, AllowOutsideClick) {
    Swal.fire({
        title: 'Warning',
        text: MessageText,
        icon: 'warning',
        customClass: 'swal-wide my-warning',
        buttons: {
            confirm: 'Ok'
        },
        confirmButtonColor: '#2527a2',
        allowOutsideClick: AllowOutsideClick,
    }).then(function (result) {
        if (result.isConfirmed) {
            if (callback != '' && typeof callback === 'function') {
                callback();
            }
        }
    });
};
function MySuccessAlertWithRedirection(MessageText, RedirectUrl, AllowOutsideClick) {
    Swal.fire({
        title: 'Success',
        text: MessageText,
        icon: 'success',
        customClass: 'swal-wide my-success',
        buttons: {
            confirm: 'Ok'
        },
        confirmButtonColor: '#2527a2',
        allowOutsideClick: AllowOutsideClick,
    }).then(callback);
    function callback(result) {
        if (result.value) {
            window.location.href = RedirectUrl;
        }
    }
};
function MyInformationAlertWithRedirection(MessageText, RedirectUrl, AllowOutsideClick) {
    Swal.fire({
        title: 'Information',
        text: MessageText,
        icon: 'info',
        customClass: 'swal-wide my-info',
        buttons: {
            confirm: 'Ok'
        },
        confirmButtonColor: '#2527a2',
        allowOutsideClick: AllowOutsideClick,
    }).then(callback);
    function callback(result) {
        if (result.value) {
            window.location.href = RedirectUrl;
        }
    }
};
function MyValidationFailedAlertWithRedirection(MessageText, RedirectUrl, AllowOutsideClick) {
    Swal.fire({
        title: 'Validation Failed',
        text: MessageText,
        icon: 'error',
        customClass: 'swal-wide my-error',
        buttons: {
            confirm: 'Ok'
        },
        confirmButtonColor: '#2527a2',
        allowOutsideClick: AllowOutsideClick,
    }).then(callback);
    function callback(result) {
        if (result.value) {
            window.location.href = RedirectUrl;
        }
    }
};
function MyErrorAlertWithRedirection(MessageText, RedirectUrl, AllowOutsideClick) {
    Swal.fire({
        title: 'Error Occurred',
        text: MessageText,
        icon: 'error',
        customClass: 'swal-wide my-error',
        buttons: {
            confirm: 'Ok'
        },
        confirmButtonColor: '#2527a2',
        allowOutsideClick: AllowOutsideClick,
    }).then(callback);
    function callback(result) {
        if (result.value) {
            window.location.href = RedirectUrl;
        }
    }
};
function MyConfirmationAlertWithRedirection(MessageText, RedirectUrl, AllowOutsideClick) {
    Swal.fire({
        title: 'Confirmation',
        text: MessageText,
        icon: 'question',
        customClass: 'swal-wide',
        confirmButtonText: "Yes",
        cancelButtonText: "No",
        cancelButtonClass: 'btn-cancel',
        confirmButtonColor: '#2527a2',
        showCancelButton: true,
        allowOutsideClick: AllowOutsideClick,
    }).then(callback);
    function callback(result) {
        if (result.value) {
            window.location.href = RedirectUrl;
        }
    }
};
function MyConfirmationAlertWithRedirectionOnCancel(MessageText, RedirectUrl, AllowOutsideClick) {
    Swal.fire({
        title: 'Confirmation',
        text: MessageText,
        icon: 'question',
        customClass: 'swal-wide',
        confirmButtonText: "Yes",
        cancelButtonText: "No",
        cancelButtonClass: 'btn-cancel',
        confirmButtonColor: '#2527a2',
        showCancelButton: true,
        allowOutsideClick: AllowOutsideClick,
    }).then(callback);
    function callback(result) {
        if (result.value) {

        }
        else {
            window.location.href = RedirectUrl;
        }
    }
};
function MyWarningAlertWithRedirection(MessageText, RedirectUrl, AllowOutsideClick) {
    Swal.fire({
        title: 'Warning',
        text: MessageText,
        icon: 'warning',
        customClass: 'swal-wide my-warning',
        confirmButtonText: "Proceed",
        cancelButtonText: "Stop",
        cancelButtonClass: 'btn-cancel',
        confirmButtonColor: '#2527a2',
        showCancelButton: true,
        allowOutsideClick: AllowOutsideClick,
    }).then(callback);
    function callback(result) {
        if (result.value) {
            window.location.href = RedirectUrl;
        }
    }
};


/**
 * Auto Apply Classes
 * 1. For Multi Select: ApplyMultiSelect/ApplyMultiSelectWithSelectAll 
 */
$(document).ready(function () {
    $('.form-control').focus(function () {
        $(this).tooltip('show');
    });
    $('input[type="date"]').each(function () {
        $(this).on("change", function () {
            $(this).ApplyCustomDateFormat();
        });
    });
    $('.ApplyMultiSelectWithSelectAll').each(function () {
        that = $(this);
        that.prop('multiple', 'multiple');
        that.multiselect({
            templates: {
                button: '<button type="button" class="multiselect dropdown-toggle btn btn-primary w-100 selectBox" data-bs-toggle="dropdown" aria-expanded="false"><span class="multiselect-selected-text"></span></button>',
            },
            includeSelectAllOption: true,
            selectAllName: 'select-all-name'
        });
        that.multiselect('clearSelection');
        that.multiselect('refresh');
    });
    $('.ApplyMultiSelect').each(function () {
        that = $(this);
        that.prop('multiple', 'multiple');
        that.multiselect({
            templates: {
                button: '<button type="button" class="multiselect dropdown-toggle btn btn-primary w-100 selectBox" data-bs-toggle="dropdown" aria-expanded="false"><span class="multiselect-selected-text"></span></button>',
            },
        });
        that.multiselect('clearSelection');
        that.multiselect('refresh');
    });
    $('.ApplyCustomTimeFormat').each(function () {
        var firstOpen = true;
        var time;
        $(this).datetimepicker({
            useCurrent: false,
            format: "hh:mm A"
        }).on('dp.show', function () {
            if (firstOpen) {
                time = moment().startOf('day');
                firstOpen = false;
            }
            else {
                time = "01:00 PM"
            }
            $(this).data('DateTimePicker').date(time);
        });
    });
    $('.indDate').on('change', function () {
        selectedDate=$(this).val();
        var formattedDate = new Date(selectedDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' });
        $('#Input1').val(formattedDate);
        $(this).val(formattedDate);

        var inputField = document.getElementById("Date1");
        var selectedDate = inputField.value;
        var formattedDate = new Date(selectedDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' });

        inputField.value = formattedDate;
    });
    $('.timePickerPreDateCtrl').each(function () {
        //time controll id pattern : time-dateCtrlID
        var myDtCtrl = $('#' + $(this).attr('id').split('-')[1]);
        $(this).datetimepicker({
            format: "hh:mm A"
        }).on("dp.show", function (e) {
            time = "01:00 PM"
        }).on("dp.change", function (e) {
            var myDate = myDtCtrl.val();
            $(this).isValid();
            if (myDate != '') {
                if (!IsValidTimeSelected(myDate, $(this).val())) {
                    $(this).isInvalid();
                    MyAlert(4, "Selected Time Should Be Greater Than The Current Time.");
                }
            }
        });
    });
});